<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Chat</title>
  <link rel="stylesheet" href="/css/main.css"/>
</head>
<body class="app">
  <%- include('partials/header') %>

  <!-- Video overlay -->
  <div class="video-layer" id="video-layer">
    <div id="videos">
      <video class="video-player" id="localVideo" autoplay muted playsinline></video>
      <video class="video-player remote-thumb" id="remoteVideo" autoplay playsinline></video>
    </div>
    <div class="controls">
      <div class="control" id="cameraButton" title="Camera">
        <!-- camera icon -->
        <svg width="22" height="16" viewBox="0 0 21 14" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M20.525 2.149C20.365 2.05 20.183 2 20 2C19.847 2 19.694 2.035 19.553 2.105L17 3.382V3C17 1.346 15.654 0 14 0H3C1.346 0 0 1.346 0 3V11C0 12.654 1.346 14 3 14H14C15.654 14 17 12.654 17 11V10.618L19.553 11.894C19.694 11.965 19.847 12 20 12C20.183 12 20.365 11.95 20.525 11.851C20.82 11.668 21 11.347 21 11V3C21 2.653 20.82 2.332 20.525 2.149ZM5 8.5C4.171 8.5 3.5 7.829 3.5 7C3.5 6.171 4.171 5.5 5 5.5C5.829 5.5 6.5 6.171 6.5 7C6.5 7.829 5.829 8.5 5 8.5Z" fill="#fff"/>
        </svg>
      </div>
      <div class="control control--danger" id="hangup" title="Hang up">
        <!-- phone down -->
        <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="#fff"><path d="M0 0h24v24H0z" fill="none"/><path d="M19 15l-2.5-2.5 1.41-1.41L20.41 14 22 12.41 19.59 10l1.41-1.41L24 12l-5 5-1-2zM3 12c3.87-3.87 10.13-3.87 14 0l-2 2c-2.74-2.74-7.26-2.74-10 0l-2-2z"/></svg>
      </div>
      <div class="control" id="micButton" title="Microphone">
        <!-- mic icon -->
        <svg width="18" height="18" viewBox="0 0 14 20" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path fill-rule="evenodd" clip-rule="evenodd" d="M7 12.5C8.7 12.5 10 11.2 10 9.5V3.5C10 1.8 8.7 0.5 7 0.5C5.3 0.5 4 1.8 4 3.5V9.5C4 11.2 5.3 12.5 7 12.5ZM12.3 9.5C12.3 12.5 9.8 14.6 7 14.6C4.2 14.6 1.7 12.5 1.7 9.5H0C0 12.9 2.7 15.7 6 16.2V19.5H8V16.2C11.3 15.7 14 12.9 14 9.5H12.3Z" fill="#fff"/>
        </svg>
      </div>
    </div>
  </div>

  <!-- Incoming call modal -->
  <div id="incoming-call" class="modal">
    <div class="modal__card">
      <p style="margin:0 0 10px; font-weight:700;">Incoming Callâ€¦</p>
      <div class="modal__actions">
        <button id="accept-call" class="btn btn--success">Accept</button>
        <button id="reject-call" class="btn btn--danger">Reject</button>
      </div>
    </div>
  </div>

  <!-- Chat area -->
  <main class="chat">
    <section id="message-container" class="messages">
      <div class="placeholder" id="placeholder">
        bhagwaan kasam koi nahi hai yaha, ruko shaayad koi aajaye.
      </div>
    </section>

    <form id="chatform" class="composer" autocomplete="off">
      <input type="hidden" id="userid" value="">
      <input id="messagebox" class="input" type="text" placeholder="Type a message"/>
      <button class="btn btn--primary" type="submit">Send</button>
    </form>
  </main>

  <video id="local-video" style="display:none" autoplay></video>
  <video id="remote-video" style="display:none" autoplay></video>

  <script src="https://cdn.socket.io/4.8.1/socket.io.min.js" crossorigin="anonymous"></script>
  <script>
    const socket = io();
    const chatform = document.querySelector("#chatform");
    const messagebox = document.querySelector("#messagebox");
    const messagecontainer = document.querySelector("#message-container");
    const placeholder = document.querySelector("#placeholder");
    const videoLayer = document.querySelector("#video-layer");

    let room;

    socket.emit("joinroom");
    socket.on("joined", (roomname) => {
      room = roomname;
      placeholder?.remove();
    });

    socket.on("message", receiveMessage);

    chatform.addEventListener("submit", (e) => {
      e.preventDefault();
      const text = messagebox.value.trim();
      if(!text) return;
      socket.emit("message", { room, message: text });
      attachMessage(text);
      messagebox.value = "";
    });

    function bubble(text, outgoing=false){
      const row = document.createElement("div");
      row.className = `message-row ${outgoing ? "message-row--out" : ""}`;
      const b = document.createElement("div");
      b.className = `message ${outgoing ? "message--out" : "message--in"}`;
      b.textContent = text;
      row.appendChild(b);
      return row;
    }
    function attachMessage(text){
      messagecontainer.appendChild(bubble(text, true));
      messagecontainer.scrollTop = messagecontainer.scrollHeight;
    }
    function receiveMessage(text){
      messagecontainer.appendChild(bubble(text, false));
      messagecontainer.scrollTop = messagecontainer.scrollHeight;
    }

    /* -------- Video Call Logic (unchanged behavior) -------- */
    let localStream, remoteStream, peerConnection, inCall = false;
    const rtcSettings = { iceServers: [{ urls: "stun:stun.l.google.com:19302" }] };

    socket.on("signalingMessage", handleSignalingMessage);

    async function initialize(){
      try{
        localStream = await navigator.mediaDevices.getUserMedia({ audio:true, video:true });
        document.querySelector('#localVideo').srcObject = localStream;
        inCall = true;
        videoLayer.classList.add("video-layer--open");
        await initiateOffer();
      }catch(e){ console.log("Media rejected"); }
    }

    async function initiateOffer(){
      await createPeerConnection();
      try{
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        socket.emit("signalingMessage", { room, message: JSON.stringify({ type:"offer", offer }) });
      }catch{ console.log("Offer create failed"); }
    }

    function createPeerConnection(){
      peerConnection = new RTCPeerConnection(rtcSettings);
      remoteStream = new MediaStream();

      const rv = document.querySelector('#remoteVideo');
      rv.srcObject = remoteStream;

      localStream.getTracks().forEach(t => peerConnection.addTrack(t, localStream));

      peerConnection.ontrack = (e) => e.streams[0].getTracks().forEach(t => remoteStream.addTrack(t));
      peerConnection.onicecandidate = (e) => {
        if(e.candidate){
          socket.emit("signalingMessage", { room, message: JSON.stringify({ type:"candidate", candidate:e.candidate })});
        }
      };
    }

    async function handleSignalingMessage(message){
      const { type, offer, answer, candidate } = JSON.parse(message);
      if(type === "offer") await handleOffer(offer);
      if(type === "answer") await handleAnswer(answer);
      if(type === "candidate" && peerConnection){
        try{ await peerConnection.addIceCandidate(candidate); }catch(e){ console.log(e); }
      }
      if(type === "hangup"){ hangup(); }
    }

    async function handleOffer(offer){
      await createPeerConnection();
      try{
        await peerConnection.setRemoteDescription(offer);
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        socket.emit("signalingMessage", { room, message: JSON.stringify({ type:"answer", answer }) });
        inCall = true;
        videoLayer.classList.add("video-layer--open");
      }catch{ console.log("Offer handle failed"); }
    }

    async function handleAnswer(answer){
      try{ await peerConnection.setRemoteDescription(answer); }catch{ console.log("Answer handle failed"); }
    }

    document.querySelector("#video-call-btn").addEventListener("click", () => {
      socket.emit("startVideoCall", { room });
    });

    socket.on("incomingCall", () => {
      document.querySelector("#incoming-call").classList.add("modal--open");
    });

    socket.on("callAccepted", () => {
      initialize();
    });

    document.querySelector("#accept-call").addEventListener("click", () => {
      document.querySelector("#incoming-call").classList.remove("modal--open");
      initialize();
      socket.emit("acceptCall", { room });
    });

    document.querySelector("#reject-call").addEventListener("click", () => {
      document.querySelector("#incoming-call").classList.remove("modal--open");
      socket.emit("rejectCall", { room });
    });

    socket.on("callRejected", () => alert("Call rejected by other user"));

    document.querySelector("#hangup").addEventListener("click", hangup);

    function hangup(){
      if(peerConnection){
        peerConnection.close();
        peerConnection = null;
        localStream?.getTracks().forEach(t => t.stop());
        videoLayer.classList.remove("video-layer--open");
        socket.emit("signalingMessage", { room, message: JSON.stringify({ type:"hangup" }) });
        inCall = false;
      }
    }
  </script>
</body>
</html>
